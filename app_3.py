# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pDHLEpb9twY3UIBvujQGBGIog7lAj2HW
"""

import streamlit as st
import pandas as pd
import re
import io

# Título de la app
st.title('Organizador de bases de datos')

# Autor de la app
st.write('Esta app fue elaborada por Juan Camilo Torres Arboleda.')

# Descripción de la app
st.write('''
            Carga los datos en el siguiente apartado para organizarlos
        ''')

def extract_data(text):
    """
    Extract structured data from unorganized text using regex patterns
    """
    # Regex patterns for different data types
    price_pattern = r'\b(\d+(?:\.\d+)?)\b'
    customer_name_pattern = r'\b([A-Z][a-z]+ [A-Z][a-z]+)\b'
    date_pattern = r'\b(\d{2}/\d{2}/\d{2})\b'
    email_pattern = r'\b([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})\b'
    phone_pattern = r'\b(\+?\d{1,2}[-.\s]?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4})\b'

    # Extract data
    prices = re.findall(price_pattern, text)
    customer_names1 = re.findall(customer_name_pattern, text)
    dates = re.findall(date_pattern, text)
    emails = re.findall(email_pattern, text)
    phones = re.findall(phone_pattern, text)

    return {
        'Precio': prices[0] if prices else None,
        'Nombre cliente': customer_names1[0] if customer_names1 else None,
        'Fecha compra': dates[0] if dates else None,
        'Email': emails[0] if emails else None,
        'Número celular': phones[0] if phones else None
    }

def process_csv(uploaded_file):
    """
    Process the uploaded CSV file and extract structured data
    """
    # Read the file as text
    file_contents = uploaded_file.getvalue().decode('utf-8')

    # Split the file into lines and process each line
    processed_data = []
    lines = file_contents.split('\n')

    for line in lines:
        if line.strip():  # Skip empty lines
            try:
                extracted_data = extract_data(line)
                processed_data.append(extracted_data)
            except Exception as e:
                st.warning(f"Could not process line: {line}")

    # Convert to DataFrame
    df = pd.DataFrame(processed_data)
    return df

def main():
    st.title('CSV Data Extractor and Organizer')

    # File uploader
    uploaded_file = st.file_uploader("Choose a CSV file", type=['csv'])

    if uploaded_file is not None:
        # Process the file
        df = process_csv(uploaded_file)

        # Display the processed data
        st.write("Processed Data:")
        st.dataframe(df)

        # Download button for Excel file
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='Processed Data')

        st.download_button(
            label="Download Excel File",
            data=output.getvalue(),
            file_name='processed_data.xlsx',
            mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

if __name__ == '__main__':
    main()
